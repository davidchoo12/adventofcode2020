use std::collections::HashMap;

fn main() {
    let input = "Tile 3557:
.#...##.#.
#.#..#...#
##....#..#
.#...##..#
..###....#
..##..#...
#.#...##.#
..##..##..
.#.....##.
#.###.....

Tile 2203:
....#.#..#
##........
#.#...#...
#.#.##.###
.#....#..#
..#.#....#
#.....#...
#.#.#.....
.#...##.#.
##....##.#

Tile 3251:
...#.#.###
##.#...#.#
.#..##...#
....##...#
.#.......#
..#......#
#..#......
##.#.#.#..
#......#..
##.##.#...

Tile 3917:
.#.#...#.#
..........
#.#.#.####
#...#...#.
..#.##..#.
#.#.#.####
..#....#..
###.#....#
...##..#..
##.#####.#

Tile 2663:
.####.###.
....##..#.
......#..#
...#......
#.#.#..#.#
##.##.....
###.###...
..#..#....
##..##....
.#..##.#..

Tile 1093:
###.##...#
#....#....
#...#..#..
..##.#####
#.....##..
#....#.#..
#..#..#.##
#.#......#
...#.....#
#.##..###.

Tile 1279:
..###.##..
#.....#...
##..#....#
#...####.#
....###..#
#....#..##
..##...###
.##.#.....
##......#.
...##.#..#

Tile 3881:
##...#....
#..##.#..#
...###...#
....#...#.
###..#.###
..#...#..#
......#...
..#..#.#..
...##.##.#
#.#.#...#.

Tile 3793:
##...#.##.
...#..#..#
..#...##..
..###..#..
##......##
##......##
#..###.#.#
#.....#..#
.#.#..#..#
.#.##.###.

Tile 3919:
#####..###
##....###.
.####.#.##
#..#......
..#.#...##
.##..#...#
.....#...#
..#.....#.
...#......
.##.##.#.#

Tile 3769:
.#.####..#
......#..#
#......#.#
.#....#..#
.........#
..........
#.......#.
.#.....#..
#...#....#
####.#.#.#

Tile 1747:
...#...#.#
..#..#.#.#
.....#...#
#.##......
#.......##
.#........
#####.....
#.#..#....
..#.......
...#....##

Tile 2711:
.##..#.#.#
#.##......
......##..
.###...#..
.#......#.
#.#....#..
......#.#.
#....#.#..
#...#.#..#
#......##.

Tile 2801:
###....##.
#..#...#.#
....##.#.#
..........
..........
........#.
#....#....
#........#
....#..#..
##.#.#.###

Tile 2287:
####.#..#.
#..#..#...
....###..#
..#.......
#....#...#
......#...
##.....#..
.#......#.
#...##....
.#.####...

Tile 1607:
##.#.#.#.#
....#....#
......##.#
........##
#..#....##
#........#
#.#..#....
...#..#...
#....#.##.
.#...##.#.

Tile 1069:
####...###
#..##..#..
.........#
#.###.....
.#.##.#..#
#.#..#....
#.##..#..#
#...#...#.
.....#....
..#..#.#.#

Tile 1721:
####..#.#.
#.......##
.#.##.....
..........
..#..#...#
##..#..#.#
.....##..#
.#..#..#.#
##.#..#...
.#.##.#...

Tile 3049:
...#.####.
##.##..##.
.#........
.#.....#.#
.##.......
#..#.#...#
.#....#..#
###....#..
##..#..#.#
..###.#..#

Tile 1871:
####.#.##.
.....##...
####...##.
.........#
###.....#.
#.#......#
#..#...#..
#........#
#.##...#..
#......###

Tile 1723:
.#..######
.###....##
.........#
.........#
.....#..#.
##.#....##
...#.#..#.
....#...##
...#..#..#
##..##...#

Tile 2237:
.#.##.#.##
.#.......#
#.......##
..#...#...
....#...#.
#...#..##.
...##.#...
#..#.#....
##...###.#
#.#....###

Tile 1549:
#..###.###
.#..##...#
....##.#.#
#..#.##.#.
......#..#
#.#..##...
#..#....#.
#.#......#
....###...
##....#..#

Tile 3119:
#.#...####
#....##..#
..#....##.
#..#....##
#..#...#..
#...#...#.
....#..#..
.##...#..#
..#.#...#.
##..#.#.##

Tile 2129:
##.#.....#
#....#....
#.........
..##..##.#
#.#####.##
##......#.
#....#...#
.......##.
....##....
#.....####

Tile 3499:
#.#.##..##
.....##..#
##...#.#.#
......##..
#....#....
##......##
..#.#.....
###.###.#.
#..#.##...
######.#..

Tile 1249:
.##.#...##
###..#...#
.......#.#
.#.#..#..#
#.#...#..#
#..#..#..#
.....#....
....#.#.#.
....#....#
....##.#.#

Tile 2789:
##.#....#.
#....#.##.
...#....#.
#........#
###.....##
#........#
##.....#.#
####..##.#
.###.#.###
##.###.###

Tile 1447:
##..#.##..
...#...###
......#..#
...#..#...
..#....##.
...#.#....
..........
#..##.#...
##...#..#.
##..#..##.

Tile 1031:
.##..###.#
...#.##.#.
#....#...#
.......###
#.#......#
#.....##..
#....##.##
#..#.....#
........#.
.#..##....

Tile 1949:
#....#....
.#.#......
.#..##....
...###.#.#
....#...#.
#..#.....#
.#....#..#
.#.......#
..#.......
##.#..####

Tile 3079:
.###.#.#.#
..........
##......#.
.......###
#......#.#
#..#......
.##.......
..#.......
...##.....
#..#..#.##

Tile 2803:
.##.....#.
.#.....###
#...#....#
..#..#....
.......#.#
#......#.#
.#.##.####
..##....#.
#.#.#..#..
####.....#

Tile 1481:
..###.##.#
.#.#.#...#
##........
..#......#
.###.#.###
...##....#
.##.#....#
###...##..
.#.#.....#
##.###.##.

Tile 2003:
.###...##.
..#...##..
..#......#
###.......
#.##...#..
#..####...
##...#..#.
.....#...#
#......#..
..###.#.##

Tile 3697:
#...#...##
##...#....
.#...##...
.........#
#.#.#.#.#.
#.#......#
#..#.#..#.
#...#.#...
#...#.....
#..#.#..#.

Tile 3727:
##.#######
.#...#...#
.#...##..#
..##.....#
#..#....##
.........#
##.#...#..
##.#.....#
..#.......
..####..##

Tile 2699:
#.#..#.##.
##..#..#.#
####...#..
.......#..
#.#.....##
.#.......#
.....#.#.#
#..#.#....
.....#..#.
.....#..##

Tile 2011:
##..#.##.#
...#....##
#........#
..#.#.#.#.
.....#...#
#......##.
#.##..##.#
..##...##.
#.#.....#.
.#...###..

Tile 2777:
...####..#
#.##....#.
..........
##...###..
#.##....#.
.#.#.....#
..#..#.#.#
##...#..##
#.....#..#
#....#..#.

Tile 1787:
#.##....#.
##...#.#.#
#......#..
......##..
#....##..#
.....#....
....##....
#.#..#.##.
##....#..#
#.#.###.#.

Tile 1783:
#.#...#.#.
#..#.#...#
#..##..###
#..#.##...
.#....#...
##..##...#
#..#.....#
#.......##
#.#.....##
##..#.#..#

Tile 1423:
#.###.#..#
..#..##...
####..#.#.
#..##..#.#
.........#
##....#.##
#.##..#...
.........#
...##....#
#..#.###..

Tile 2917:
###...####
#....##..#
......#.#.
....#.##.#
....#....#
#........#
.#.....#..
...#.##..#
#...#.#..#
##...#..#.

Tile 1531:
#..#..#.##
...##.##.#
.......#.#
......#..#
....#....#
.#........
....#..#.#
...#....##
.#.#.##...
..##...#.#

Tile 1867:
#.#.#####.
.##...#..#
..........
#.##..#..#
#.###..#.#
.......#..
...#.#.###
...##.##..
.......#..
.##..###.#

Tile 1901:
##....####
.....##..#
#.#...#.##
.#.#..##..
...#...#.#
#..#...#.#
...##.#..#
#........#
...###...#
#####..#.#

Tile 2879:
.####.#..#
#.#.#..#.#
.##...#..#
####.##..#
..##.##...
##.......#
..........
#.#..##.#.
.#.#...#.#
.#..#.#.##

Tile 1187:
.#####.###
##.......#
.#...##.#.
.#..#.#.#.
.#..#..#.#
##....#...
#..#......
.##....###
.#.#...#.#
.#......##

Tile 1657:
..##.#..##
.#...###.#
....#.#..#
...#..#..#
..#......#
..#...#..#
...#...#.#
#.....#.#.
#..##..###
###.#.#..#

Tile 3533:
#####..#..
..#.#.##.#
.#........
........#.
.#...#.#..
.#........
.##.......
#......#..
#......###
.###.#.#.#

Tile 3037:
.#...#..##
#.#....#..
.....##...
#....####.
#..###.##.
#.......##
#..#..#...
#....###.#
#.....##.#
..#.###.##

Tile 2729:
.#.##.....
##...#..##
.#..#...#.
.#...#..#.
#.#...#...
###.#.#..#
#.........
.##...#.#.
##.......#
###..#.##.

Tile 3823:
...#...###
#..##.##..
...#......
...#....#.
....#....#
...#......
....#...##
#........#
...#....#.
#..#.#.#..

Tile 2081:
#..##..#..
...#....##
..........
#..#.#...#
#.#....#.#
#..#..#.#.
#####.#..#
....###.##
...#.#...#
.##..#.#..

Tile 1759:
#.#.#..#..
#........#
##........
#.#......#
.......#..
.#.#....##
....#.....
#......#..
#..##.#..#
..###...##

Tile 3467:
.#.####..#
#....###.#
...#..#...
#....#....
....##..##
#.#.......
#....#...#
.##...#.##
...#..#..#
##....#..#

Tile 3041:
...###.#..
.##.####..
.#.##..##.
#...##....
###......#
#...#....#
#..#.#.###
##.##.#..#
##.#.#...#
#..###..#.

Tile 2473:
###..#.#.#
#.##.##.##
#..#..#..#
##.......#
.#..#..#..
..##......
#.#...#...
...#.....#
.#....##..
#..##.#.##

Tile 3191:
.....#..##
##..#....#
#........#
.......##.
..#.#...##
...#.....#
.........#
..#.#.#...
##.#....##
#.#..#####

Tile 2269:
##..#.###.
#..#.#...#
#.....#..#
.#........
#.##..##.#
.....##.##
.......#.#
.#.......#
##.#..#.#.
.#.#.##.#.

Tile 1847:
...#...#.#
##.......#
#.......##
##........
##.......#
#..#..#...
...#....##
#.#.##...#
#.###....#
..##.####.

Tile 2399:
###....#.#
....#....#
....##..##
####.#...#
#........#
.....#...#
#..##.####
.#..#.....
##...#.#..
#.......##

Tile 1051:
.#..#....#
.......#..
.#...####.
#..#..#.##
##.....#..
##.#.#.#..
.#........
#..##..#.#
#...#.#.#.
##.#....##

Tile 3709:
#.....###.
#..#.#....
##..#..#.#
.......#.#
.....#..#.
.#..##.#.#
.###.##..#
#.##.#..##
..#......#
......##.#

Tile 1019:
##...##...
....#.....
.....#..#.
..........
##........
.........#
..........
#.#..#..#.
##....###.
#.####.#.#

Tile 1163:
...##...##
..#......#
......##..
..##..#...
#...#....#
#...#.##.#
....##....
#........#
#.......#.
##..####.#

Tile 1061:
###.#..#.#
.##.......
#.##..#...
.#..##..##
#...#.....
#......#.#
#..#.#...#
...#.#####
#...##.#.#
####.#.#..

Tile 1811:
....#..##.
.##.#....#
#.#.#..#..
###.....##
#.#......#
#...#.....
#...#.###.
#...#.....
..##......
##.#.####.

Tile 1301:
##.##.#..#
#.##.##...
#...#..##.
...#...#..
.#.#......
....#....#
....#....#
...#.....#
#.#.#.###.
#..#..####

Tile 1933:
.##.#.##.#
#...#.....
#.....###.
..##....#.
###...#...
##..#....#
#.....#..#
#......###
#.....#.##
.##.###.#.

Tile 1889:
##.#.##...
....#.....
..........
..##.##...
....##...#
#.#.#....#
...##.#...
.##.....#.
....##...#
..########

Tile 2411:
#...#.#..#
......#..#
#...#..#..
..#.....#.
#.#..#...#
..#......#
#...#.#...
.......#..
..........
..##..#.##

Tile 1861:
.##...#.##
.....##...
#........#
..#..#....
##.....#.#
.#####...#
.#.##..#.#
##..#....#
#.......#.
##..#..#..

Tile 2671:
..#..#....
##..#....#
#.#.......
.#.#.....#
...#......
..#......#
##........
###.....##
##.##.#.#.
..#.##..#.

Tile 2347:
#.####....
#.....#...
#...#.####
.###..#..#
#.#.#.....
#.#.......
........#.
..##..#...
#..###....
#..#...#..

Tile 1913:
#..#.#..##
#.#.#.#.#.
....#.#.#.
#.....#..#
#.#.###...
#.#..#.#..
.#.....#..
.##...#..#
#.......##
..#.#.##..

Tile 2887:
#####..###
....##...#
#......#..
###.#.###.
#........#
....#.....
####..###.
....#....#
....#.#...
.###..####

Tile 3449:
..###.#...
##.#.##..#
...#......
#..#......
..#.#...#.
#...#...#.
#.......##
.........#
...#.#...#
#.##.##..#

Tile 3947:
.......###
.#.#.....#
#.#.#..##.
..#...#.#.
#..#...###
....#..###
......#...
#..##.###.
..#...#..#
..##.#.##.

Tile 1109:
#.##..#.##
.#.......#
#.....##.#
.........#
#.#..#...#
#...#....#
#.........
#.#......#
.....#.#.#
.#.#####.#

Tile 1153:
#.#.###..#
####....##
......#...
........##
........#.
##..#....#
....#.#..#
#.#....#..
.#.#....##
.#....#.##

Tile 3259:
.#.#...###
##....##..
#...####..
.#...#...#
..#.#.#..#
#....###..
...#.###..
.....#.##.
#...#..#.#
.###...#.#

Tile 3659:
##.#..#.#.
#.......##
#.....##.#
.#..#.....
#...##.#.#
#.##...#..
.##.#..#..
.##.#..#.#
#.##..#.#.
#..#######

Tile 3833:
##.##....#
.###.....#
##.......#
##.#.##..#
..##....#.
##.......#
#....#....
#.#......#
.###.#.#..
..#..#....

Tile 3529:
##..#####.
#..#....##
...#.....#
#..##....#
.#.#.###.#
#.##......
.#.#...#..
#...##..##
.......#.#
..#.#.##.#

Tile 2819:
#.#..###.#
.......#.#
#...#..##.
##.#.....#
.#..#.....
.#..#.####
#.......##
.#...#....
####.....#
##.....##.

Tile 1801:
#####..##.
####..###.
#.#..#..#.
..#......#
...#....#.
#.#......#
...#.##..#
#...#.....
##....##..
.#.#..###.

Tile 1307:
######.##.
..#......#
.......##.
#.#....#..
#.#.#..#..
.........#
....##.#..
..##..##..
#....#...#
#...##.#.#

Tile 2719:
..#######.
#......#..
###....##.
#.....#.##
#..#..#.#.
....#....#
......##..
##.#...#.#
#.....#.##
#..##.##..

Tile 1973:
####..##.#
......#...
##.....##.
#..#..#...
......#...
.......#..
....#.#..#
##.#..###.
#.##...#.#
##.###.#.#

Tile 1553:
#....#..##
...#......
#........#
#..#.....#
..#.......
#..#.#.#..
.......#..
.#.#...#..
##.#.....#
.###..#.#.

Tile 3271:
.#..#..#.#
#.#...#.##
#......#.#
###......#
#....#....
##.......#
#..#.##..#
#.......#.
...#.#....
.###.#####

Tile 3797:
#.##..####
.....#....
#...#...#.
#...##....
#....#..#.
#...##.##.
##...##.#.
#.......#.
#.##...#.#
#...##.#..

Tile 2089:
##..###..#
##...#..#.
#....##..#
..##.....#
.......#.#
#.....#..#
#....#....
.....#.##.
..##..#.##
.....##..#

Tile 3821:
.###.....#
..#.#..##.
.#...#....
.........#
#...#.....
#....##..#
#...#....#
#...#...#.
..#..#....
##.####...

Tile 2549:
...###.#..
..#.##..#.
#.#.......
..##......
#.#......#
..#...#..#
.#..#.##..
..#....#..
#...##..#.
##..#..#.#

Tile 1697:
.##.#.##..
.......#..
.#....####
#......#.#
.......#..
...#..#..#
#......#.#
.#.....###
#..#...#..
#...###...

Tile 2749:
..#...#..#
..#...#..#
#.##.###..
..##......
#..#.###..
#.####....
#.....#...
#.#.#.....
#.........
#...###.##

Tile 1063:
.##..#..#.
..#....#.#
..##..#..#
........#.
...#.....#
.........#
#.....#.##
.......###
##..#.#...
.#..####..

Tile 1471:
...##..#.#
##.#..#...
#...#....#
..#......#
#.#.#...##
..##.....#
.........#
......##.#
.#..#.#..#
#...#####.

Tile 1609:
#..##.####
##...#....
#.#...#...
.#.###.###
.....#.#..
##....#...
...##...#.
##........
#...#.#...
##...#....

Tile 2437:
..##.#.#.#
..#.#....#
...#......
#.....#..#
.#....#..#
##..##....
#.#......#
.....#..#.
....##.###
..#####.##

Tile 1823:
###..###..
##...#....
#.....###.
#........#
.....###.#
.....#..##
#..#..#...
##........
#.........
..########

Tile 2273:
#.#.#.#.##
....#..#..
#..#......
#....##...
.#.#..#.##
#.........
.#.##..#..
..#......#
#....##.#.
##.##.####

Tile 3607:
##.#.###.#
...#.....#
##..##..##
...###....
..##.#...#
#.#...#.#.
#...#....#
#..####...
....#.#.#.
...#...###

Tile 1303:
.#..######
...#...#.#
..##...##.
....#..#..
#.#.###.##
##.#..####
..#...#...
#.#.#..#.#
#.........
#.#.#####.

Tile 1283:
.#.#.#....
.#..##....
.#...#....
#.........
##.###...#
##.####..#
#....#...#
.#.#...#.#
#.##.....#
##.#..#.#.

Tile 2791:
#....###..
....#....#
#......#.#
#....#.##.
.#.##....#
#......#.#
.......#..
....#....#
#..#......
..#####.##

Tile 2797:
.#####..#.
.......#..
#..##....#
.##...##.#
.#...#.#.#
#.#...##.#
#.#.......
##.##...##
..#....#..
###..##...

Tile 1087:
......#.##
#.#......#
.#....#..#
#.#.#.#..#
#...#.....
#..#...#..
.....#...#
...#......
#.....#..#
###..##.##

Tile 1409:
#####.###.
.#.#.#...#
#....#...#
.....#.#.#
#....#..##
###..##.##
##..####..
..........
#........#
.####.#.##

Tile 3593:
#.######..
##...#.#..
..#......#
#.....##.#
.#...#....
#...#.#.#.
...#..#...
##.......#
.....#...#
...#..#..#

Tile 3347:
.#.##.#.#.
..........
....#...#.
#.#..#..##
...#..##..
##.#....#.
#.#..#...#
.#.###.#.#
#...#.#..#
.#.####.##

Tile 3637:
.#.##....#
##...###.#
.#.#.#....
....##...#
.#........
#......#..
##.#...#..
###..##..#
.#........
...#.###..

Tile 1907:
#.#.#..###
.##..#....
##..#..#.#
.......#..
#..#......
..##.#..#.
.###..##.#
.......#.#
.#....#...
#..#...#.#

Tile 3371:
#.##...###
.....#....
#......#..
.#.#..#...
##.#...#..
.##......#
..#..###.#
#.....#.#.
#.#..#.#.#
...#..####

Tile 1367:
##.....#..
.#..#..#..
.###....##
.#.#..#.##
##.....##.
###.....##
...#...#.#
#....#...#
##.....#.#
#....#.##.

Tile 1559:
#..#.##..#
#..#.##...
#.#..#...#
.......#.#
....#.####
#...#...##
..#.#...##
#....#...#
..#..#.#.#
.........#

Tile 2713:
..#.###.##
#.##.....#
#......#.#
#..#...#..
.#.......#
.......##.
.........#
..#...##.#
#....#.#.#
#.#..##...

Tile 3203:
###.#####.
###...#...
###..#...#
.#..##..##
#....#.##.
#.....#..#
#....#...#
..........
.##...#...
.#.###.##.

Tile 1979:
#...#.#..#
#.#.....#.
.#.###...#
.....#.##.
##.#.#..##
.##....###
.##......#
#......#.#
#.....#.#.
......##.#

Tile 3307:
..##...#.#
#......#..
##..#.##..
...##.#.##
.##.......
.##....###
#..##.#..#
.#.#.#....
#...#.#..#
#.#..###.#

Tile 1667:
###.#.##..
.......##.
..#...##..
........##
#.......##
#.....##..
...##.#.#.
#.......#.
........##
##....#...

Tile 1699:
..##...###
.....#....
#..#.###..
...##.....
.##.#..#..
......#...
#.........
####.....#
#.#..#....
#...#..#.#

Tile 2591:
#...##....
###..###..
##.#..#...
..#.#..##.
.....#.#.#
##..###...
#..####.##
##........
..#......#
.###.#..#.

Tile 3169:
####.##...
##.##.....
......#...
#.##..#.##
....###.#.
#.#..#..##
#..###....
#..#.....#
..###..#..
##..##..#.

Tile 1459:
..#...####
.....##...
..#.......
...#.#....
##....#..#
.##...##.#
..#..#.###
#.##..#...
#..#.#.#.#
..#.#.##..

Tile 3373:
..#####..#
..#..#...#
#.###..#.#
...##.....
.#.##.....
#..#..#...
....#.....
#.#.#....#
...#...#..
.##.......

Tile 3461:
######...#
....##....
##........
#.#..#.#.#
###.....#.
.....#....
.....###.#
##.......#
....###.#.
..#.#..##.

Tile 2609:
#####...##
#.........
.....##...
##....##..
..##.#....
##.......#
........#.
........##
####......
.#.###....

Tile 2459:
#..##.#...
.#...#####
##........
#....#....
#...##.#..
##...###.#
##........
...##....#
#...#....#
.##.....#.

Tile 1831:
###..#..##
.#......##
.#.#..#...
#......#.#
#.........
..#....#..
.####...#.
....#..#..
......##.#
###...#..#

Tile 2063:
.###...#.#
###......#
##..#..###
##........
.###.##.##
##.#.#..#.
..##....##
..#......#
#####...#.
#####..#..

Tile 2281:
#...####..
..#.#....#
........#.
#.........
..#..#..##
##.##..#.#
........#.
....##...#
####.#.#.#
.###..#..#

Tile 1583:
#####.##.#
#....##.#.
#..##.....
...#......
..###.#...
..##.....#
##..#....#
.....#...#
.......##.
#.##...#.#

Tile 2539:
..##......
.#..#..#..
#...#...#.
#..##.#.#.
......####
#.##...##.
##...#..#.
#.#......#
##....#..#
###..#...#

Tile 2909:
..#.....##
##...##..#
#........#
.#........
###....###
...#.##..#
#..#..##..
#..##...#.
....#....#
#..##..#..

Tile 2939:
..#...#.#.
..#.......
..........
.#.##..#.#
#.##.##.#.
###.#....#
..#..#....
.##......#
##...##...
##.#..#...

Tile 3889:
##..#.#.##
##.####...
#.#.####..
..####..#.
##.#.....#
#.......##
........##
##.##....#
...###...#
#..###..##

Tile 1427:
#.#.#....#
##.##.####
.....#...#
#.#..#....
...#.#..#.
.....#...#
.#...###.#
####.#....
........##
#..#..##..

Tile 1319:
.#####...#
#...#....#
#........#
#....##...
.##......#
..#.....##
.....#..##
......#..#
...#....#.
.##....###

Tile 1523:
.....###.#
..#......#
...#.....#
#..#..#..#
.........#
#..#..#.#.
####..#..#
..#......#
...##.##.#
####....##

Tile 2381:
.#.#..##.#
#..#..#.##
..........
..###..#..
.###.##.##
##....##.#
...##....#
#...#.....
.#.......#
#....###..";
    let tiles: Vec<&str> = input.split("\n\n").collect();
    println!("no of tiles {}", tiles.len());
    let mut tileno_tile: HashMap<&str, Vec<Vec<char>>> = HashMap::new();
    let mut edge_tileno: HashMap<String, Vec<&str>> = HashMap::new();
    for tile in tiles {
        let tileno = &tile[5..9];
        let tilechars: Vec<Vec<char>> = tile.lines().skip(1).map(|s| s.chars().collect()).collect();
        tileno_tile.insert(tileno, tilechars.clone());
        let top: String = tilechars[0].iter().collect();
        let bottom: String = tilechars.last().unwrap().iter().collect();
        let left: String = tilechars.iter().map(|v| v.first().unwrap()).collect();
        let right: String = tilechars.iter().map(|v| v.last().unwrap()).collect();
        for edge in &[top, right, bottom, left] {
            let reversed: String = edge.chars().rev().collect();
            edge_tileno.entry(edge.to_string()).or_insert(Vec::new()).push(tileno);
            edge_tileno.entry(reversed).or_insert(Vec::new()).push(tileno);
        }
    }
    // println!("{:?}", edge_tileno);
    let mut edge_tileno2 = edge_tileno.clone();
    // tiles that are on the edges and corners
    edge_tileno2.retain(|_, v| v.len() == 1);
    let mut tileno_edge: HashMap<&str, Vec<String>> = HashMap::new();
    for (k, v) in edge_tileno2 {
        tileno_edge.entry(v[0]).or_insert(Vec::new()).push(k);
    }
    // println!("{:?}", tileno_edge);
    let mut corners_tileno: Vec<&str> = vec![];
    let mut edges_tileno = vec![];
    for (k, v) in &tileno_edge {
        if v.len() == 4 {
            corners_tileno.push(*k);
        } else if v.len() == 2 {
            edges_tileno.push(k);
        }
    }
    println!("{:?} {:?}", corners_tileno, edges_tileno);

    // START STITCHING ALL TILES
    let mut alltiles: Vec<Vec<Vec<Vec<char>>>> = vec![vec![]];
    let mut alltilenos: Vec<&str> = vec![];
    let mut prevno = corners_tileno[0];
    // let mut prevno = "1951";
    let mut prevtile: Vec<Vec<char>> = vec![];
    let edges = tileno_edge.get(prevno).unwrap();
    let tile = tileno_tile.get(prevno).unwrap();
    'outer: for edge1 in edges {
        for edge2 in edges {
            let oriented = find_orientation_by_left(edge1, tile).unwrap();
            // let oriented = find_orientation_by_left(&String::from("#..#..#.##"), tile).unwrap();
            if top(&oriented) == edge2.to_string() {
            // if top(&oriented) == String::from("#...##.#..") {
                println!("{}", prevno);
                pprint(&oriented);
                prevtile = oriented;
                break 'outer;
            }
        }
    }
    let mut row = 0;
    let mut prev_right_edge = right(&prevtile);
    alltiles[row].push(prevtile);
    alltilenos.push(prevno);
    loop {
        let mut curr_tileno: Vec<&str>;
        let first_col_bottom_edge = bottom(&alltiles[row][0]);
        println!("{:?} {:?}", &prev_right_edge, &first_col_bottom_edge);
        let tilenos = edge_tileno.get(&prev_right_edge).unwrap();
        curr_tileno = tilenos
            .iter()
            .filter(|&x| !alltilenos.contains(x))
            .map(|&x| x)
            .collect::<Vec<&str>>();
        println!("{:?}", curr_tileno);
        if curr_tileno.len() > 0 {
            let curr_tile = tileno_tile.get(curr_tileno[0]).unwrap();
            prevtile = find_orientation_by_left(&prev_right_edge, curr_tile).unwrap();
            pprint(&prevtile);
        } else if let Some(tilenos) = edge_tileno.get(&first_col_bottom_edge) {
            println!("NEW ROW");
            curr_tileno = tilenos
                .iter()
                .filter(|&x| !alltilenos.contains(x))
                .map(|&x| x)
                .collect::<Vec<&str>>();
            println!("{:?}", curr_tileno);
            if curr_tileno.len() == 0 {
                break;
            }
            let curr_tile = tileno_tile.get(curr_tileno[0]).unwrap();
            prevtile = find_orientation_by_top(&first_col_bottom_edge, curr_tile).unwrap();
            pprint(&prevtile);
            alltiles.push(vec![]);
            row += 1;
        } else { // this shouldn't happen but compiler complains if i don't put
            break;
        }
        prev_right_edge = right(&prevtile);
        alltiles[row].push(prevtile);
        prevno = curr_tileno[0];
        alltilenos.push(prevno);
    }
    // pprint_alltiles(&alltiles);
    let mut combinedtiles: Vec<Vec<char>> = vec![];
    let mut combinedtiles_hashes = 0;
    for tilerows in alltiles {
        for r in 1..tilerows[0].len()-1 {
            let mut row = vec![];
            for tile in &tilerows {
                for c in 1..&tile[r].len()-1 {
                    // print!("{}", &tile[r][c]);
                    row.push(tile[r][c]);
                    if tile[r][c] == '#' {
                        combinedtiles_hashes += 1;
                    }
                }
                // print!(" ");
            }
            combinedtiles.push(row);
            // println!();
        }
        // println!();
    }
    // pprint(&combinedtiles)
    // END STITCHING ALL TILES

    // START FINDING MONSTER
    let monster = "                  # 
#    ##    ##    ###
 #  #  #  #  #  #   ";
    // let mut monster_coords: Vec<Vec<usize>> = vec![];
    let mut monster_coords: Vec<(usize, usize)> = vec![];
    let monster_height = monster.lines().count();
    let monster_width = monster.lines().nth(0).unwrap().len();
    let mut monster_parts = 0;
    // println!("{} {}", monster_height, monster_width);
    for (i, ml) in monster.lines().enumerate() {
        // let mut coords_row = vec![];
        for (j, mc) in ml.chars().enumerate() {
            if mc == '#' {
                // coords_row.push(j);
                monster_coords.push((i, j));
                monster_parts += 1;
            }
        }
        // monster_coords.push(coords_row);
    }
    println!("{:?}", monster_coords);
    let mut monster_count = 0;
    let mut rotate_count = 0;
    for _i in 0..8 { // 8 orientations
        for r in 0..combinedtiles.len()-monster_height+1 {
            for c in 0..combinedtiles[0].len()-monster_width+1 {
                if monster_coords.iter().all(|&(mr, mc)| combinedtiles[r+mr][c+mc] == '#') {
                    monster_count += 1;
                    pprint(&combinedtiles);
                    println!("{} {}", r, c);
                }
            }
        }
        if monster_count > 0 {
            break;
        }
        if rotate_count < 3 {
            rotate_cw(&mut combinedtiles);
            rotate_count += 1;
        } else {
            rotate_cw(&mut combinedtiles);
            vflip(&mut combinedtiles);
            rotate_count = 0;
        }
    }
    // END FINDING MONSTER
    println!("combinedtiles_hashes {}", combinedtiles_hashes);
    println!("monster_parts {}", monster_parts);
    println!("monster_count {}", monster_count);
    println!("ans {}", combinedtiles_hashes - monster_parts * monster_count);
}

fn pprint(tile: &Vec<Vec<char>>) {
    for r in tile {
        for c in r {
            print!("{}", c);
        }
        println!();
    }
    println!();
}

// fn pprint_alltiles(tiletable: &Vec<Vec<Vec<Vec<char>>>>) {
//     for tilerows in tiletable {
//         for r in 0..tilerows[0].len() {
//             for tile in tilerows {
//                 for c in &tile[r] {
//                     print!("{}", c);
//                 }
//                 print!(" ");
//             }
//             println!();
//         }
//         println!();
//     }
// }

fn top(tile: &Vec<Vec<char>>) -> String {
    tile[0].iter().collect::<String>()
}
fn bottom(tile: &Vec<Vec<char>>) -> String {
    tile.last().unwrap().iter().collect::<String>()
}
fn left(tile: &Vec<Vec<char>>) -> String {
    tile.iter().map(|v| v.first().unwrap()).collect::<String>()
}
fn right(tile: &Vec<Vec<char>>) -> String {
    tile.iter().map(|v| v.last().unwrap()).collect::<String>()
}
fn top_rev(tile: &Vec<Vec<char>>) -> String {
    top(tile).chars().rev().collect()
}
fn bottom_rev(tile: &Vec<Vec<char>>) -> String {
    bottom(tile).chars().rev().collect()
}
fn left_rev(tile: &Vec<Vec<char>>) -> String {
    left(tile).chars().rev().collect()
}
fn right_rev(tile: &Vec<Vec<char>>) -> String {
    right(tile).chars().rev().collect()
}

fn rotate_cw(tile: &mut Vec<Vec<char>>) {
    let clone = tile.clone();
    for c in 0..tile[0].len() {
        for (i, r) in (0..tile.len()).rev().enumerate() {
            // won't work if height != width, but luckily tile is square
            tile[c][i] = clone[r][c];
        }
    }
}
fn rotate_ccw(tile: &mut Vec<Vec<char>>) {
    let clone = tile.clone();
    for (i, c) in (0..tile[0].len()).rev().enumerate() {
        for r in 0..tile.len() {
            tile[i][r] = clone[r][c];
        }
    }
}
fn rotate_180(tile: &mut Vec<Vec<char>>) {
    let clone = tile.clone();
    for (i, r) in (0..tile.len()).rev().enumerate() {
        for (j, c) in (0..tile[0].len()).rev().enumerate() {
            tile[i][j] = clone[r][c];
        }
    }
}
fn vflip(tile: &mut Vec<Vec<char>>) {
    tile.reverse();
}
fn hflip(tile: &mut Vec<Vec<char>>) {
    for r in tile.iter_mut() {
        r.reverse();
    }
}

// rot_cw
//  a   B   D   c
// b c d a C B A D
//  d   C   A   b

// rot_cw vflip
//  d   C   A   b
// B C D A c b a d
//  a   B   D   c

// rot_cw hflip
//  A   b   d   C
// c b a d B C D A
//  D   c   a   B

// rot_cw vflip hflip
//  D   c   a   B
// C B A D b c d a
//  A   b   d   C

// rot_cw hflip vflip
//  D   c   a   B
// C B A D b c d a
//  A   b   d   C
fn find_orientation_by_left(left_edge: &String, tile: &Vec<Vec<char>>) -> Option<Vec<Vec<char>>> {
    let mut transformed = tile.clone();
    match left_edge.as_str() {
        x if x == top(&tile) => {
            rotate_cw(&mut transformed);
            hflip(&mut transformed);
        },
        x if x == bottom(&tile) => rotate_cw(&mut transformed),
        x if x == left(&tile) => (),
        x if x == right(&tile) => hflip(&mut transformed),
        x if x == top_rev(&tile) => rotate_ccw(&mut transformed),
        x if x == bottom_rev(&tile) => {
            rotate_cw(&mut transformed);
            vflip(&mut transformed);
        },
        x if x == left_rev(&tile) => vflip(&mut transformed),
        x if x == right_rev(&tile) => rotate_180(&mut transformed),
        _ => {
            return None;
        }
    }
    Some(transformed)
}

fn find_orientation_by_top(top_edge: &String, tile: &Vec<Vec<char>>) -> Option<Vec<Vec<char>>> {
    let mut transformed = tile.clone();
    match top_edge.as_str() {
        x if x == top(&tile) => (),
        x if x == bottom(&tile) => vflip(&mut transformed),
        x if x == left(&tile) => {
            rotate_cw(&mut transformed);
            hflip(&mut transformed);
        },
        x if x == right(&tile) => rotate_ccw(&mut transformed),
        x if x == top_rev(&tile) => hflip(&mut transformed),
        x if x == bottom_rev(&tile) => rotate_180(&mut transformed),
        x if x == left_rev(&tile) => rotate_cw(&mut transformed),
        x if x == right_rev(&tile) => {
            rotate_cw(&mut transformed);
            vflip(&mut transformed);
        },
        _ => {
            return None;
        }
    }
    Some(transformed)
    // let transformed_left: String = transformed.iter().map(|v| v.first().unwrap()).collect();
    // if left_edge == transformed_left {
    //     Some(transformed)
    // } else {
    //     None
    // }
}
// ans 2065